{"version":3,"sources":["svg/segment.js","svg/point.js","svg/index.js","serviceWorker.js","index.js"],"names":["Segment","p1","p2","this","d1","x","d2","y","alpha","Math","atan2","r","sqrt","Point","join","Layout","props","children","style","border","onMouseMove","e","width","height","Circle","coords","cx","cy","stroke","strokeWidth","fill","Rect","w","h","Square","getSquareCenter","Eye","scoords","Fragment","Line","x1","y1","x2","y2","Rhombus","c1","c2","S","x3","cos","y3","sin","x4","y4","points","Boolean","window","location","hostname","match","ReactDOM","render","useState","setX","setY","onChange","func","v","Number","target","value","console","log","type","min","max","marginTop","transform","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bef37fe1.chunk.js","sourcesContent":["class Segment {\n  constructor(p1, p2) {\n    this.p1 = p1;\n    this.p2 = p2;\n\n    this.d1 = p1.x - p1.x;\n    this.d2 = p2.y - p2.y;\n\n    this.alpha = Math.atan2(this.d1, this.d2);\n    this.r = Math.sqrt(this.d1**2 + this.d2**2);\n  }\n}\n\nexport default Segment;","export default class Point {\n  constructor (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  toLin() {\n    return [this.x, this.y].join(',');\n  }\n}\n\n","import React, { useState } from 'react';\n\nimport Segment from './segment';\nimport Point from './point';\n\nfunction Layout(props) {\n  const { children } = props;\n\n  const onMouseMove = e => {\n    //const x = e.screenX - 7;\n    //const y = e.screenY - 86;\n\n    //const c = { x, y };\n    //console.log(c)\n  }\n\n  return <svg style={{border: '1px solid black'}} onMouseMove={onMouseMove} width=\"100%\" height=\"800px\">{children}</svg>;\n}\n\nconst Circle = props => {\n  const { r = 10, coords: {x, y} = {x: 0, y: 0} } = props;\n\n  return <circle r={r} cx={x} cy={y} stroke=\"green\" strokeWidth=\"1\" fill=\"none\"/>\n}\n\nconst Rect = props => {\n  const { w, h, coords: {x, y} = {x: 0, y: 0}} = props;\n  return <rect width={w} height={h} x={x} y={y} style={{fill: 'none', strokeWidth:1, stroke: 'rgb(0,0,0)'}} />\n}\n\nconst Square = props => {\n  const { w, coords} = props;\n\n  return <Rect w={w} h={w} coords={coords}/>\n}\n\nconst getSquareCenter = (w, coords) => {\n  const x = coords.x + w/2;\n  const y = coords.y + w/2;\n  return {x, y};\n}\n\nconst Eye = (props) => {\n  const { w, coords } = props;\n  const scoords = getSquareCenter(w, coords);\n\n  return <React.Fragment>\n    <Circle r={Math.sqrt(2)*w/2} coords={scoords}/>\n    <Circle r={w/2} coords={scoords}/>\n    <Circle r={Math.sqrt(2)*w} coords={coords}/>\n    <Circle r={Math.sqrt(2)*w} coords={getSquareCenter(w, scoords)}/>\n    <Square w={w} coords={coords}/>\n  </React.Fragment>\n}\n\nconst Line = props => {\n  return <line x1=\"303\" y1=\"50\" x2=\"140\"  y2=\"208\" stroke=\"orange\" strokeWidth=\"1\"/>;\n}\n\nconst Rhombus = props => {\n  const { c1, c2 } = props;\n\n  const S = new Segment(c1, c2)\n\n  const x3 = S.p1.x - S.r*Math.cos(S.alpha);\n  const y3 = S.p1.y + S.r*Math.sin(S.alpha);\n  const x4 = S.p2.x - S.r*Math.cos(S.alpha);\n  const y4 = S.p2.y + S.r*Math.sin(S.alpha);\n\n  const points = [\n    [S.x1, S.y1].join(','),\n    [S.x2, S.y2].join(','),\n    [x4, y4].join(','),\n    [x3, y3].join(','),\n  ].join(' ');\n\n  return <polygon points={points} style={{fill:'none', stroke:'purple', strokeWidth:1}} />\n}\n\nexport default props => {\n  const r = 25\n  //const scoords = {x: r * 1.2, y: r*1.2};\n\n  const [ x, setX ] = useState(144);\n  const [ y, setY ] = useState(156);\n\n  const coords = {x: 250, y: 50};\n  const w = 53;\n  //const scoords = getSquareCenter(w, coords);\n\n  const onChange = (e, func) => {\n    const v=Number(e.target.value);\n    console.log(v);\n    func(v);\n  }\n\n  return <React.Fragment>\n    <input type=\"range\" min={0} max={200} onChange={(e) => onChange(e, setX)} value={x}/>\n    <input type=\"range\" min={0} max={200} onChange={(e) => onChange(e, setY)} value={y} style={{marginTop: '50px', transform: 'rotate(270deg)'}}/>\n    <Layout>\n    <Eye r={r} w={w} coords={coords}/>\n    <Eye r={r} w={w} coords={{x, y}}/>\n    {/*<Circle r={200} coords={{x: 319, y: 233}}/>*/}\n    <Line/>\n    <Rhombus c1={new Point(50,70)} c2={new Point(100,90)}/>\n  </Layout>\n  </React.Fragment>\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Svg from './svg';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Svg/>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}